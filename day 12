// Online C++ compiler to run C++ program online

// question 1 Write a function void printLinkedList(Node* head) that traverses a singly linked list and prints each element's value. Input: A linked list with elements 10 -> 20 -> 30 -> 40
#include <iostream>
using namespace std;

class Node{
    public:
  int data;
  Node* next;
  
  Node(int val){
      data = val;
      next = NULL;
  }
};
  void print(Node* head){
      Node* temp = head;
      while(temp != NULL){
          cout << temp->data << " ";
          temp = temp->next;
      }
      cout << endl;
  }
  
  void insertAtTail(Node* &head, int val){
      Node* newNode = new Node(val);
      Node* temp = head;
      if(head == NULL){
          head = newNode;
          newNode->next =  NULL;
          return;
      }
      else{
          while(temp->next != NULL){
              temp = temp->next;
          }
          temp->next = newNode;
          newNode->next = NULL;
      }
  }

int main() {
    Node* head;
    insertAtTail(head, 10);
    insertAtTail(head, 20);
    insertAtTail(head, 30);
    insertAtTail(head, 40);
    print(head);
    
    return 0;
}
// question 2 Write a function void insertAtEnd(Node*& head, int data) that inserts a new node with the given data at the end of a singly linked list. nput: A linked list with elements 10 -> 20 -> 30, and a new data 40
// Output: The linked list becomes 10 -> 20 -> 30 -> 40
// Online C++ compiler to run C++ program online
#include <iostream>
using namespace std;

class Node{
    public:
  int data;
  Node* next;
  
  Node(int val){
      data = val;
      next = NULL;
  }
};
  void print(Node* head){
      Node* temp = head;
      while(temp != NULL){
          cout << temp->data << " ";
          temp = temp->next;
      }
      cout << endl;
  }
  
  void insertAtTail(Node* &head, int val){
      Node* newNode = new Node(val);
      Node* temp = head;
      if(head == NULL){
          head = newNode;
          newNode->next =  NULL;
          return;
      }
      else{
          while(temp->next != NULL){
              temp = temp->next;
          }
          temp->next = newNode;
          newNode->next = NULL;
      }
  }

int main() {
    Node* head;
    insertAtTail(head, 10);
    insertAtTail(head, 20);
    insertAtTail(head, 30);
    insertAtTail(head, 40);
    print(head);
    
    return 0;
}
